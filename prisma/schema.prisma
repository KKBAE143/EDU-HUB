//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  stripeCustomerId  String?
  status            UserStatus         @default(VERIFIED)
  globalRole        String             @default("USER")
  /// @password
  /// @omit
  password          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
  organizationRoles OrganizationRole[]
  enrollments       Enrollment[]       @relation("user")
  reviews           Review[]           @relation("user")
  achievements      Achievement[]      @relation("user")
  subscriptions     Subscription[]     @relation("user")
}

/// @@allow('all', true)
model LearningPlatform {
  id          String   @id() @default(uuid())
  name        String
  description String?
  websiteUrl  String?
  courses     Course[] @relation("learningPlatform")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Course {
  id                 String              @id() @default(uuid())
  title              String
  description        String?
  duration           Float?
  difficultyLevel    String?
  organizationId     String
  organization       Organization?       @relation(fields: [organizationId], references: [id], name: "organization")
  learningPlatformId String
  learningPlatform   LearningPlatform    @relation(fields: [learningPlatformId], references: [id], name: "learningPlatform")
  instructorId       String?
  instructor         Instructor?         @relation(fields: [instructorId], references: [id], name: "instructor")
  curriculum         CurriculumItem[]    @relation("curriculum")
  enrollments        Enrollment[]        @relation("course")
  reviews            Review[]            @relation("course")
  achievements       Achievement[]       @relation("course")
  aiGeneratedCourses AiGeneratedCourse[] @relation("course")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Instructor {
  id        String   @id() @default(uuid())
  name      String
  bio       String?
  courses   Course[] @relation("instructor")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model CurriculumItem {
  id          String   @id() @default(uuid())
  title       String
  description String?
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], name: "curriculum")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Enrollment {
  id                 String   @id() @default(uuid())
  enrollmentDate     String
  completionStatus   String?
  progressPercentage String?
  userId             String
  user               User?    @relation(fields: [userId], references: [id], name: "user")
  courseId           String
  course             Course?  @relation(fields: [courseId], references: [id], name: "course")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Review {
  id        String   @id() @default(uuid())
  rating    Float?
  comment   String?
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  courseId  String
  course    Course?  @relation(fields: [courseId], references: [id], name: "course")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Achievement {
  id          String   @id() @default(uuid())
  name        String
  description String?
  earnedAt    String
  badgeUrl    String?
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  courseId    String
  course      Course?  @relation(fields: [courseId], references: [id], name: "course")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Subscription {
  id               String        @id() @default(uuid())
  startDate        String
  endDate          String?
  status           String?
  subscriptionType String?
  userId           String
  user             User?         @relation(fields: [userId], references: [id], name: "user")
  organizationId   String
  organization     Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model AiGeneratedCourse {
  id                 String   @id() @default(uuid())
  aiModel            String?
  generationDate     String
  prompt             String?
  additionalMetadata String?
  courseId           String
  course             Course?  @relation(fields: [courseId], references: [id], name: "course")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id               String             @id() @default(uuid())
  name             String
  pictureUrl       String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt()
  roles            OrganizationRole[]
  courses          Course[]           @relation("organization")
  subscriptions    Subscription[]     @relation("organization")
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}
